stages:
  - build
  - sast
  - dependency-check
  - container-scan
  - dast
  - iast
  - report
  - deploy

variables:
  DOCKER_IMAGE: "$CI_REGISTRY_IMAGE"
  DOCKER_TAG: "$CI_COMMIT_SHA"
  SECURE_LOG_LEVEL: "debug"
  NODEJS_VERSION: "14"
  DOCKER_DRIVER: overlay2

# Build Stage
build:app:
  stage: build
  image: node:${NODEJS_VERSION}
  script:
    - npm ci
    - npm run build
  artifacts:
    paths:
      - node_modules/
      - public/js/bundle.js
    expire_in: 1 day

build:docker:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $DOCKER_IMAGE:$DOCKER_TAG .
    - docker tag $DOCKER_IMAGE:$DOCKER_TAG $DOCKER_IMAGE:latest
    - docker push $DOCKER_IMAGE:$DOCKER_TAG
    - docker push $DOCKER_IMAGE:latest
    - docker save $DOCKER_IMAGE:$DOCKER_TAG > image.tar
  artifacts:
    paths:
      - image.tar
    expire_in: 1 day

# SAST Stage
sast:eslint:
  stage: sast
  image: node:${NODEJS_VERSION}
  dependencies:
    - build:app
  script:
    - npm install --save-dev eslint eslint-plugin-security @microsoft/eslint-formatter-sarif
    - npx eslint . --ext .js,.jsx --format @microsoft/eslint-formatter-sarif --output-file eslint-sast.sarif || true
  artifacts:
    reports:
      sast: eslint-sast.sarif

sast:semgrep:
  stage: sast
  image: returntocorp/semgrep
  script:
    - semgrep --config=auto --sarif --output=semgrep-sast.sarif .
  artifacts:
    reports:
      sast: semgrep-sast.sarif

sast:nodejs-scan:
  stage: sast
  image: python:3.9
  script:
    - pip install njsscan
    - njsscan . --sarif -o njsscan-sast.sarif
  artifacts:
    reports:
      sast: njsscan-sast.sarif

sast:snyk:
  stage: sast
  image: snyk/snyk:node
  dependencies:
    - build:app
  script:
    - snyk test --severity-threshold=low --sarif-file-output=snyk-sast.sarif || true
  artifacts:
    reports:
      sast: snyk-sast.sarif

secret_detection:
  stage: sast
  image: python:3.9
  script:
    - pip install detect-secrets
    - detect-secrets scan --all-files > secrets-report.json || true
    - |
      if [ -s secrets-report.json ] && [ $(jq '.results | length' secrets-report.json) -gt 0 ]; then
        echo "Secrets detected!"
        jq '.results' secrets-report.json
        exit 1
      fi
  artifacts:
    paths:
      - secrets-report.json

# Dependency Check Stage
dependency_check:npm:
  stage: dependency-check
  image: node:${NODEJS_VERSION}
  dependencies:
    - build:app
  script:
    - npm audit --production --json > npm-audit.json || true
    - npm audit --production
  artifacts:
    paths:
      - npm-audit.json

dependency_check:owasp:
  stage: dependency-check
  image: owasp/dependency-check:latest
  script:
    - /usr/share/dependency-check/bin/dependency-check.sh 
      --project "nodejs-goof" 
      --scan . 
      --format ALL 
      --enableExperimental 
      --enableRetired
  artifacts:
    paths:
      - dependency-check-report.*

license_check:
  stage: dependency-check
  image: node:${NODEJS_VERSION}
  dependencies:
    - build:app
  script:
    - npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD;ISC' --excludePrivatePackages > license-report.txt
  artifacts:
    paths:
      - license-report.txt

# Container Scan Stage
container_scan:trivy:
  stage: container-scan
  image: aquasecurity/trivy:latest
  dependencies:
    - build:docker
  script:
    - docker load < image.tar
    - trivy image --format sarif --output trivy-container.sarif $DOCKER_IMAGE:$CI_COMMIT_SHA
  artifacts:
    reports:
      container_scanning: trivy-container.sarif

container_scan:grype:
  stage: container-scan
  image: anchore/grype:latest
  dependencies:
    - build:docker
  script:
    - docker load < image.tar
    - grype $DOCKER_IMAGE:$CI_COMMIT_SHA -o sarif > grype-container.sarif
  artifacts:
    reports:
      container_scanning: grype-container.sarif

# DAST Stage
dast:zap:
  stage: dast
  image: owasp/zap2docker-stable:latest
  services:
    - name: $DOCKER_IMAGE:$CI_COMMIT_SHA
      alias: app
    - name: mongo:4.4
      alias: mongodb
  dependencies:
    - build:docker
  script:
    - docker load < image.tar
    - sleep 30  # Wait for app to start
    - zap-full-scan.py -t http://app:3001 -r zap-report.html -J zap-report.json || true
  artifacts:
    paths:
      - zap-report.*

dast:nuclei:
  stage: dast
  image: projectdiscovery/nuclei:latest
  services:
    - name: $DOCKER_IMAGE:$CI_COMMIT_SHA
      alias: app
    - name: mongo:4.4
      alias: mongodb
  dependencies:
    - build:docker
  script:
    - docker load < image.tar
    - sleep 30  # Wait for app to start
    - nuclei -u http://app:3001 -severity low,medium,high,critical -o nuclei-report.txt
  artifacts:
    paths:
      - nuclei-report.txt

# IAST Stage
iast:test:
  stage: iast
  image: node:${NODEJS_VERSION}
  services:
    - mongo:4.4
  dependencies:
    - build:app
  before_script:
    - npm install --save-dev @contrast/agent
    - echo "require('@contrast/agent');" > contrast-init.js
  script:
    - export NODE_OPTIONS="-r ./contrast-init.js"
    - export MONGODB_URI="mongodb://mongo:27017/express-todo"
    - npm test || true
    - |
      # Run integration tests with IAST monitoring
      npm start &
      APP_PID=$!
      sleep 30
      
      # Execute test scenarios
      curl -X POST http://localhost:3001/login -d "username=admin&password=admin"
      curl http://localhost:3001/api/todos
      curl -X POST http://localhost:3001/api/todos -d "todo=test"
      
      kill $APP_PID
  artifacts:
    paths:
      - .contrast/

# Security Report Generation
security_report:
  stage: report
  image: node:${NODEJS_VERSION}
  dependencies:
    - sast:eslint
    - sast:semgrep
    - sast:nodejs-scan
    - sast:snyk
    - secret_detection
    - dependency_check:npm
    - dependency_check:owasp
    - container_scan:trivy
    - container_scan:grype
    - dast:zap
    - dast:nuclei
  script:
    - |
      cat > security-report.md << EOF
      # Security Scan Report
      
      ## Project: nodejs-goof
      ## Pipeline: $CI_PIPELINE_ID
      ## Commit: $CI_COMMIT_SHA
      ## Date: $(date)
      
      ### Summary
      
      | Scan Type | Tool | Status |
      |-----------|------|--------|
      | SAST | ESLint Security | ✅ |
      | SAST | Semgrep | ✅ |
      | SAST | NodeJSScan | ✅ |
      | SAST | Snyk | ✅ |
      | Secret Detection | detect-secrets | ✅ |
      | Dependency Check | npm audit | ✅ |
      | Dependency Check | OWASP | ✅ |
      | Container Scan | Trivy | ✅ |
      | Container Scan | Grype | ✅ |
      | DAST | OWASP ZAP | ✅ |
      | DAST | Nuclei | ✅ |
      | IAST | Contrast | ✅ |
      
      ### Detailed Results
      
      Detailed scan results are available in the pipeline artifacts.
      
      EOF
  artifacts:
    paths:
      - security-report.md
    reports:
      junit: security-report.xml

# Deploy Stage
deploy:registry:
  stage: deploy
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  dependencies:
    - build:docker
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "Docker image deployed to GitLab Container Registry"
    - echo "Image - $DOCKER_IMAGE:$DOCKER_TAG"
    - echo "Latest - $DOCKER_IMAGE:latest"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "master"'

deploy:runner:
  stage: deploy
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  dependencies:
    - build:docker
  variables:
    APP_PORT: "3001"
    CONTAINER_NAME: "nodejs-goof-app"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    # Stop and remove existing container
    - docker stop $CONTAINER_NAME || true
    - docker rm $CONTAINER_NAME || true

    # Load the Docker image
    - docker load < image.tar

    # Run MongoDB
    - docker stop nodejs-goof-mongo || true
    - docker rm nodejs-goof-mongo || true
    - docker run -d --name nodejs-goof-mongo -p 27017:27017 mongo:4.4

    # Run MySQL
    - docker stop nodejs-goof-mysql || true
    - docker rm nodejs-goof-mysql || true
    - docker run -d --name nodejs-goof-mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=acme mysql:5.7

    # Wait for databases to start
    - sleep 10

    # Run the application
    - |
      docker run -d \
        --name $CONTAINER_NAME \
        -p $APP_PORT:3001 \
        --link nodejs-goof-mongo:mongo \
        --link nodejs-goof-mysql:mysql \
        -e DOCKER=1 \
        -e MONGODB_URI=mongodb://nodejs-goof-mongo:27017/goof \
        -e MYSQL_HOST=nodejs-goof-mysql \
        -e MYSQL_USER=root \
        -e MYSQL_PASSWORD=root \
        -e MYSQL_DATABASE=acme \
        $DOCKER_IMAGE:$DOCKER_TAG

    # Wait for app to start
    - sleep 5

    # Get the runner's hostname/IP
    - RUNNER_IP=$(hostname -I | awk '{print $1}')

    # Display deployment information
    - echo "========================================="
    - echo "Application Deployed Successfully!"
    - echo "========================================="
    - echo "Application URL - http://$RUNNER_IP:$APP_PORT"
    - echo "Alternative - http://localhost:$APP_PORT (if accessing from runner host)"
    - echo "Container Name - $CONTAINER_NAME"
    - echo "Docker Image - $DOCKER_IMAGE:$DOCKER_TAG"
    - echo "========================================="
    - echo "MongoDB - nodejs-goof-mongo:27017"
    - echo "MySQL - nodejs-goof-mysql:3306"
    - echo "========================================="

    # Verify container is running
    - docker ps | grep $CONTAINER_NAME

    # Check application health
    - |
      for i in {1..10}; do
        if wget --spider --tries=1 --timeout=2 http://localhost:$APP_PORT 2>/dev/null; then
          echo "✅ Application is healthy and responding!"
          exit 0
        fi
        echo "Waiting for application to be ready... ($i/10)"
        sleep 3
      done
      echo "⚠️  Application deployed but health check timed out"
  environment:
    name: production
    url: http://$RUNNER_IP:$APP_PORT
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "master"'
  tags:
    - docker

# Include GitLab's built-in security templates (optional)
# Uncomment these if you have GitLab Ultimate/Gold tier
# include:
#   - template: Security/SAST.gitlab-ci.yml
#   - template: Security/Secret-Detection.gitlab-ci.yml
#   - template: Security/Container-Scanning.gitlab-ci.yml
#   - template: Security/DAST.gitlab-ci.yml
#   - template: Security/Dependency-Scanning.gitlab-ci.yml



  